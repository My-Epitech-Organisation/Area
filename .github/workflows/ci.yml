# AREA CI Workflow

name: CI

on:
  push:
    branches: [ "main", "master", "dev" ]
    paths-ignore: [ "**/*.md", "docs/**" ]

  pull_request:
    branches: [ "main", "master" ]
    paths: [ "backend/**", "frontend/**", "mobile/**", "docker-compose.yml" ]
  workflow_dispatch:

jobs:
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: area_user
          POSTGRES_PASSWORD: secret_password
          POSTGRES_DB: area_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U area_user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting
        run: |
            cd backend
            if ./scripts/lint-check.sh; then
            echo "Linting succeeded"
            else
            echo "Linting failed"
            exit 1
            fi

    #   - name: Run tests
    #     run: |

      - name: Build Docker image
        run: |
          docker build -t area_backend ./backend

  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      # - name: Run tests
      #   run: |
      #     cd frontend
      #     npm test

      - name: Run build
        run: |
          cd frontend
          npm run build

      - name: Build Docker image
        run: |
          docker build -t area_frontend ./frontend

  mobile-ci:
    name: Mobile CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            mobile/.dart_tool
            mobile/.flutter-plugins
            mobile/.flutter-plugins-dependencies
          key: ${{ runner.os }}-flutter-${{ hashFiles('mobile/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        run: |
          cd mobile
          flutter pub get

      - name: Run linting
        run: |
          cd mobile
          flutter analyze

      - name: Run tests
        run: |
          cd mobile
          flutter test

      - name: Build Android APK
        run: |
          cd mobile
          flutter build apk --release

  docker-compose-validation:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, mobile-ci]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for testing
        run: |
          cat <<EOF > .env
          DB_USER=area_user
          DB_PASSWORD=secret_password
          DB_NAME=area_db
          DB_PORT=5432
          REDIS_PORT=6379
          BACKEND_PORT=8080
          FRONTEND_PORT=80
          EOF

      - name: Set up Docker Compose
        run: |
          docker --version
          docker compose --version

      - name: Test Docker Compose build
        run: |
          docker compose build --no-cache
          docker compose up -d
          sleep 30
          docker compose ps
          docker compose down
