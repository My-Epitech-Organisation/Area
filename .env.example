# ============================================================================# Database configuration (PostgreSQL)

# AREA Project - Environment Variables TemplateDB_USER=area_user

# ============================================================================DB_PASSWORD=area_password_2024

# Copy this file to .env and fill in your actual valuesDB_NAME=area_db

# NEVER commit .env with real credentials to git!DB_HOST=db

# ============================================================================DB_PORT=5432



# ============================================================================# Redis configuration

# 1. DATABASE CONFIGURATION (PostgreSQL)REDIS_PORT=6379

# ============================================================================REDIS_URL=redis://redis:6379/0

DB_USER=area_user

DB_PASSWORD=area_password_2024 # Backend Django configuration

DB_NAME=area_dbBACKEND_PORT=8080

DB_HOST=dbDJANGO_SETTINGS_MODULE=area_project.settings

DB_PORT=5432SECRET_KEY=your-very-secret-django-key-change-in-production

DEBUG=True

# ============================================================================

# 2. REDIS CONFIGURATION# Frontend URL for OAuth redirects (important for OAuth flow)

# ============================================================================# Development: http://localhost:5173

REDIS_PORT=6379 # Production: https://your-frontend-domain.com

REDIS_URL=redis://redis:6379/0FRONTEND_URL=http://localhost:5173



# ============================================================================# Django Superuser (Optional - created automatically on first startup if set)

# 3. DJANGO BACKEND CONFIGURATIONDJANGO_SUPERUSER_EMAIL=admin@areaction.app

# ============================================================================DJANGO_SUPERUSER_PASSWORD=change-this-secure-password

BACKEND_PORT=8080

DJANGO_SETTINGS_MODULE=area_project.settings # JWT Configuration

JWT_SIGNING_KEY=your-jwt-signing-key-change-in-production

# SECRET_KEY: Generate a secure random key for production

# Use: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"# Email configuration (SMTP Gmail for password reset)

SECRET_KEY=your-very-secret-django-key-change-in-production # To use Gmail, you need to create an App Password:

# 1. Go to https://myaccount.google.com/security

# DEBUG: Set to False in production!# 2. Enable 2-Step Verification

DEBUG=True # 3. Go to https://myaccount.google.com/apppasswords

# 4. Create an app password and use it here

# ENVIRONMENT: development, staging, or productionEMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend

ENVIRONMENT=developmentEMAIL_HOST=smtp.gmail.com

EMAIL_PORT=587

# ============================================================================EMAIL_USE_TLS=True

# 4. DJANGO SUPERUSER (Optional - auto-created on first startup if set)EMAIL_USE_SSL=False

# ============================================================================EMAIL_HOST_USER=epi.areaction@gmail.com

DJANGO_SUPERUSER_EMAIL=admin@areaction.appEMAIL_HOST_PASSWORD=your-gmail-app-password-here

DJANGO_SUPERUSER_PASSWORD=change-this-secure-passwordDEFAULT_FROM_EMAIL=epi.areaction@gmail.com



# ============================================================================# Frontend configuration

# 5. LOGGING CONFIGURATIONFRONTEND_PORT=8081

# ============================================================================FRONTEND_DEV_PORT=5173

LOG_LEVEL=INFO

DJANGO_LOG_FILE=/app/logs/django.log # Flower monitoring

FLOWER_PORT=5555

# ============================================================================

# 6. JWT AUTHENTICATION# CORS and security

# ============================================================================ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# JWT_SIGNING_KEY: Used to sign JWT tokens. Generate a secure random key!CORS_ALLOW_ALL_ORIGINS=True

JWT_SIGNING_KEY=your-jwt-signing-key-change-in-production

# OAuth2 Configuration (for external services)

# ============================================================================GOOGLE_CLIENT_ID=your-google-client-id

# 7. EMAIL CONFIGURATION (SMTP Gmail)GOOGLE_CLIENT_SECRET=your-google-client-secret

# ============================================================================GITHUB_CLIENT_ID=your-github-client-id

# To use Gmail, create an App Password:GITHUB_CLIENT_SECRET=your-github-client-secret

# 1. Go to https://myaccount.google.com/security

# 2. Enable 2-Step Verification# OAuth2 Configuration (for external services)

# 3. Go to https://myaccount.google.com/apppasswordsGOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com

# 4. Create an app password and use it belowGOOGLE_CLIENT_SECRET=your-google-client-secret

GOOGLE_REDIRECT_URI=http://localhost:8080/auth/oauth/google/callback/

EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend

EMAIL_HOST=smtp.gmail.comGITHUB_CLIENT_ID=your-github-client-id

EMAIL_PORT=587GITHUB_CLIENT_SECRET=your-github-client-secret

EMAIL_USE_TLS=TrueGITHUB_REDIRECT_URI=http://localhost:8080/auth/oauth/github/callback/

EMAIL_USE_SSL=False

EMAIL_HOST_USER=your-email@gmail.com # Logging configuration

EMAIL_HOST_PASSWORD=your-gmail-app-password-hereLOG_LEVEL=INFO

DEFAULT_FROM_EMAIL=your-email@gmail.comDJANGO_LOG_FILE=/app/logs/django.log



# ============================================================================# Celery configuration

# 8. FRONTEND CONFIGURATIONCELERY_TIMEZONE=UTC

# ============================================================================CELERY_TASK_ALWAYS_EAGER=False

FRONTEND_PORT=8081

FRONTEND_URL=http://localhost:8081 # Docker environment

COMPOSE_PROJECT_NAME=area
# Vite environment variables (must be prefixed with VITE_ to be exposed to client)
# Development: http://localhost:8080
# Production: https://areaction.app/api
VITE_API_BASE=http://localhost:8080

# ============================================================================
# 9. CORS AND SECURITY SETTINGS
# ============================================================================
# ALLOWED_HOSTS: Comma-separated list of allowed host/domain names
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# CORS_ALLOW_ALL_ORIGINS: Set to False in production and configure specific origins
CORS_ALLOW_ALL_ORIGINS=True

# Security flags (set to True in production with HTTPS)
SECURE_SSL_REDIRECT=False
SESSION_COOKIE_SECURE=False
CSRF_COOKIE_SECURE=False

# ============================================================================
# 10. OAUTH2 CONFIGURATION (External Service Authentication)
# ============================================================================

# --- Google OAuth2 ---
# Get credentials from: https://console.cloud.google.com/apis/credentials
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_REDIRECT_URI=http://localhost:8080/auth/oauth/google/callback/

# --- GitHub OAuth2 ---
# Get credentials from: https://github.com/settings/developers
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret
GITHUB_REDIRECT_URI=http://localhost:8080/auth/oauth/github/callback/

# ============================================================================
# 11. WEBHOOK SECRETS (for validating incoming webhooks)
# ============================================================================
# Generate secure random strings for each webhook secret
# Use: openssl rand -hex 32

GITHUB_WEBHOOK_SECRET=dev_secret_github_123
GMAIL_WEBHOOK_SECRET=dev_secret_gmail_123
WEBHOOK_SECRET=dev_secret_webhook_123

# ============================================================================
# 12. CELERY CONFIGURATION (Task Queue)
# ============================================================================
CELERY_TIMEZONE=UTC

# CELERY_TASK_ALWAYS_EAGER: If True, tasks execute synchronously (useful for testing)
CELERY_TASK_ALWAYS_EAGER=False

# ============================================================================
# 13. MONITORING (Flower - Celery Task Monitor)
# ============================================================================
FLOWER_PORT=5555

# ============================================================================
# 14. DOCKER CONFIGURATION
# ============================================================================
COMPOSE_PROJECT_NAME=area

# ============================================================================
# PRODUCTION DEPLOYMENT NOTES
# ============================================================================
# When deploying to production:
# 1. Set DEBUG=False
# 2. Set ENVIRONMENT=production
# 3. Generate new SECRET_KEY and JWT_SIGNING_KEY
# 4. Set SECURE_SSL_REDIRECT=True
# 5. Set SESSION_COOKIE_SECURE=True
# 6. Set CSRF_COOKIE_SECURE=True
# 7. Set CORS_ALLOW_ALL_ORIGINS=False
# 8. Update ALLOWED_HOSTS with your production domain
# 9. Update all OAuth redirect URIs with production URLs
# 10. Update VITE_API_BASE with production API URL
# 11. Generate strong webhook secrets
# 12. Use real OAuth credentials (not dev placeholders)
# ============================================================================
