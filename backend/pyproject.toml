[build-system]
requires = ["setuptools>=68.0"]
build-backend = "setuptools.build_meta"

# ========================================
# RUFF Configuration
# ========================================
[tool.ruff]
line-length = 88
target-version = "py313"
extend-exclude = [
    "migrations",
    "venv",
    "__pycache__",
    ".mypy_cache",
    "reports",
]

[tool.ruff.lint]
# Select rules equivalent to your previous setup:
# E,W = pycodestyle (like flake8 base)
# F = Pyflakes (like flake8 base)
# B = flake8-bugbear
# C4 = flake8-comprehensions
# SIM = flake8-simplify
# DJ = flake8-django
# I = isort import sorting
# S = flake8-bandit security rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "DJ",  # flake8-django
    "I",   # isort import sorting
    "S",   # bandit security rules
    "F401", # unused imports (was in your flake8 config)
]

# Preserve your specific ignores
ignore = [
    "E203",  # whitespace before ':' (Black compatibility)
    # Note: W503 is deprecated in favor of W503 in newer versions
    # Ruff handles line breaks differently than flake8
]

[tool.ruff.lint.per-file-ignores]
# Django migrations can be long and auto-generated
"*/migrations/*.py" = ["E501", "DJ01", "S106", "S308"]

# Tests can use assert statements, hardcoded passwords, long lines, and unused imports
"*/tests/*.py" = ["S101", "S106", "S105", "E501", "F401", "B904"]  # Django test patterns
"**/test_*.py" = ["S101", "S106", "S105", "E501", "F401", "B904"]
"**/tests.py" = ["S101", "S106", "S105", "E501", "F401", "B904"]

# Django settings can have star imports, long lines, and bind to all interfaces
"*/settings/*.py" = ["E402", "S104", "F403", "F405", "E501", "B904", "F541", "W292", "F401"]
"*/settings.py" = ["E402", "S104", "B904"]

# Django-specific exclusions from .flake8 config
"*/admin.py" = ["F401"]  # Django admin imports OK if unused
"*/views.py" = ["F401", "E501"]  # Django views can have unused imports and long filter lines
"*/routing.py" = ["F401"]  # Django routing files can have unused imports

# Django validation files can have long lines and complex logic
"*/validators.py" = ["E501", "SIM102", "B904"]
"*/serializers.py" = ["E501", "B904"]

[tool.ruff.format]
# Black-compatible formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
# Preserve your exact isort configuration
known-first-party = ["area_project", "users", "automations"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "django",
    "first-party",
    "local-folder"
]
combine-as-imports = true
# Note: force-grid-wrap is not supported in Ruff isort, handled by formatter

[tool.ruff.lint.isort.sections]
# Custom Django section like your original config
django = ["django"]

# ========================================
# BANDIT Configuration (keep for advanced security)
# ========================================
[tool.bandit]
exclude_dirs = [
    "tests", "*/tests/*", "./tests/*",
    "venv", "./venv", "*/venv/*",
    "migrations", "*/migrations/*",
    "__pycache__", "*/__pycache__/*",
    "area_project/settings", "./area_project/settings/*", "*/area_project/settings/*"
]
skips = ["B101"]  # Skip assert_used test only
# Note: settings and tests directories completely excluded from security scans

[tool.coverage.run]
source = "."
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/tests/*",
    "manage.py",
    "area_project/wsgi.py",
    "area_project/asgi.py",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]
